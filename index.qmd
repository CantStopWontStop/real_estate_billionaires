---
title: "American Real Estate Billionaires"
author: "Sorie Dumbuya"
date: "2023-10-27"

format:
    html:
        code-fold: true

execute: 
  eval: true
  warning: false
  message: false
  echo: false

categories: 
    - R
    - ggplot
    - mapping
    - visualization
    - tidyverse

editor: visual
---

```{r}
library(tidyverse)
library(DT)
library(gt)
library(gtExtras)
library(leaflet)
library(htmltools)
library(googlesheets4)
```

```{r}
afromation_cols <- c("#2E2E2E", "#2b6144","#842c1d", "#CDBC88","#4f839e", "#bccbf3", "#e4e4e4"
)

theme_set(theme_minimal())
```

```{r}
files <- list.files('downloaded_images/')
```

```{r}
#| column: screen-inset
data_raw <-  googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1ICjbS8SRTXU4VpcypX9Owot3RtCkByDu3sNh0n8Q6-o/edit#gid=0') |> 
    # readr::read_csv('data.csv')|> 
    select(Name, 
           `Net Worth`, 
           `First Name`,
           `Last Name`,
           Age, 
           Race, 
           Gender,
           Religion, 
           `Education Level`,
           City, 
           State,
           Country,
           `Head Shot`, 
           Latitude,
           Longitude) |> 
    arrange('Last Name')

data_raw <- data_raw |> 
    mutate(`net_worth_dollar` =  scales::label_dollar()(data_raw$`Net Worth`)) 

data_raw$`Head Shot` <- glue::glue('downloaded_images/{files}')

data_raw <- data_raw |> 
    arrange(desc(`Net Worth`))

data_raw |> 
  select(-`Head Shot`, -Latitude, -Longitude, 
           -`First Name`,
           -`Last Name`,
         -`Net Worth`,) |> 
  DT::datatable()



```

```{r}



# Create a data frame with the image tags
data_table <- data_raw %>%
  mutate(
    religion = case_when(
      Religion == 'Catholic' ~ 'cross',
      str_detect(Religion, 'Jewish') ~ 'star-of-david',
      Religion == 'Unknown' ~ 'question',
      TRUE ~ NA
    ),
    gender = case_when(
      Gender == 'Male' ~ 'mars',
      TRUE ~ 'venus'
    )) %>%
  select(Name, Age, Race, gender, religion, `Net Worth`, net_worth_dollar, `Head Shot`) 

# Create the table
data_table %>%
  gt() %>%
  gt_fa_column(religion) %>%
  gt_fa_column(gender) %>%
  gt_plt_bar(column = `Net Worth`, color = '#34713e') %>%
  cols_width(
    `Net Worth` ~ px(200),
    contains('icon') ~ px(20)
    ) %>% 
    gt_img_rows(columns = `Head Shot`, 
                img_source = 'local',
                height = 50) %>%


  gt_theme_espn()






```

```{r}

data_raw$Gender <- factor(data_raw$Gender, levels = c("Male", "Female"))

data_raw$`Education Level` <- factor(data_raw$`Education Level`, levels = c("High School", "Bachelors", "Masters", "Doctorate"))


plot_bars <- function(data, group, sort_by = "count") {
  if (sort_by == "count") {
    data %>%
      group_by(!!sym(group)) %>%
      summarise(Count = n()) %>%
      arrange(desc(Count)) %>%
      ggplot(aes(y = reorder(!!sym(group), Count), x = Count, fill = !!sym(group))) +
      geom_col() +
      scale_fill_manual(values = afromation_cols) +
      labs(y = group, fill = glue::glue('{group}'))+
      theme(legend.position = 'top',
            text = element_text(size = 16), 
            axis.title.x = element_blank(),
            legend.title = element_blank())
  } else if (sort_by == "factor") {
    data %>%
      group_by(!!sym(group)) %>%
      summarise(Count = n()) %>%
      ggplot(aes(y = reorder(!!sym(group), Count), x = Count, fill = !!sym(group))) +
      geom_col() +
      scale_fill_manual(values = afromation_cols) +
      labs(y = group, fill = glue::glue('{group}')) +
      theme(legend.position = 'top',
            text = element_text(size = 16), 
            axis.title.x = element_blank(),
            legend.title = element_blank())
  } else {
    stop("Invalid value for 'sort_by'. Use 'count' or 'factor'.")
  }
}

plot_bars(data = data_raw, group = "Gender", sort_by = "count")


plot_bars(data = data_raw, group = "Religion")

plot_bars(data = data_raw, group = "Race", sort_by = "factor")

data_raw |>
    group_by(`Education Level`) |> 
    summarise(Count = n()) |> 
    arrange(Count |> desc()) |> 
    ggplot2::ggplot(aes(y= `Education Level`, x = Count, fill = `Education Level`)) +
    geom_col() +
  scale_fill_manual(values = afromation_cols) +
    theme_minimal()+
      theme(legend.position = 'top',
            text = element_text(size = 16), 
            axis.title.x = element_blank(),
            legend.title = element_blank())
```

```{r}
leaflet(data_raw) %>%
  addTiles()%>%
  setView(
    lng = -95.7129,  # Center longitude for the USA
    lat = 37.0902,   # Center latitude for the USA
    zoom = 4         # Zoom level (adjust as needed)
  ) %>%
  addMarkers(
    lat = ~Latitude,
    lng = ~Longitude,
    label = ~glue::glue('{Name} | {City}')
  )
```

```{r}
map <- leaflet() %>%
  addTiles()  # Add the default tileset as the map background

# Add city markers to the map
for (i in 1:nrow(data_raw)) {
  map <- map %>%
    addMarkers(
      lng = data_raw$Longitude[i],
      lat = data_raw$Latitude[i],
      popup = data_raw$City[i]
    )
}

# Display the map
map
```

```{r}
# usmap::us_map() |> 
#     rename(state = full) |> 
#     group_by(state) |> 
#     summarise() |> 
#     left_join(data_raw %>%
#   group_by(State) %>%
#     rename(state = State) |> 
#   summarize(Count = n())) %>%
#   mutate(Count = replace_na(Count, 0)) |>
#   usmap::plot_usmap(data = ., 
#                     values = "Count", 
#                     labels = FALSE) +
#   scale_fill_continuous(name = "Count", 
#                         label = "Count", 
#                         low = "#e2ede2", 
#                         high = "#34713e")+
#   theme(legend.position = "none")

```

```{r}
# data_raw %>%
#     rename(state = State)  |> 
#   group_by(state) %>%
#   summarize(Count = n()) %>%
#   usmap::plot_usmap(data = ., values = "Count", labels = FALSE) +
#   scale_fill_continuous(name = "Count", label = scales::comma, low = "#e2ede2", high = "#34713e") +
#   theme(legend.position = "none")
```
